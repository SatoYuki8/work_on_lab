/*16bit floating adder*/
/*************************************
  Half-precision floating-point format
    _______________________________
   | | | | | | | | | | | | | | | | |  (16 bit)
   |5|4|3|2|1|a|9|8|7|6|5|4|3|2|1|0|  
   |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|
    | |_______| |_________________|
    |   exponent      fraction(10bit: precision=11bit)
  sign  (5bit)  
 (1bit)

**************************************/

%i "comp_bit.h"
%i "fivebit_comp.h"
%i "sub_shift.h"
%i "add_or_sub.h"
%i "exp_inc_right_shift.h"
%i "read_zero_and_shift.h"

module add_half{
    input a<16>, b<16>;
    output sum<16>;
    instrin do;
    
    sel_v sign_a<1>, sign_b<1>;
    sel_v exp_a<5>, exp_b<5>;
 /* sel_v frac_a<10>, frac_b<10>; */
    sel_v frac_a<13>, frac_b<13>;  /* hidden || frac || guard || round  */
    sel_v sticky;                 /* sticky bit */

    sel_v shifted_frac_b<13>;
    sel_v frac_tmp<13>;

    sel_v res_exp<5>;             /* result exp */
    sel_v res_frac<13>;           /* result frac */

    fivebit_comp comp, comp_last;             /* comparison module */
    sub_shift sub_shift;           /* exp sub and right shift module */
    add_or_sub aors;               /* frac addition or subtraction module */
    exp_inc_right_shift exsh;      /* exp plus 1 and frac shifted right module */
    read_zero_and_shift rzas;      /* when sub operation, count zero and left shit */

    instruct do par{
	alt {
	    /* when exp is 0b00000 and frac 0b00...0 */
	    /* value is ZERO */
	    ((a<14:10> == 0b00000) & (a<9:0> == 0b0000000000)): sum = b;
	    ((b<14:10> == 0b00000) & (b<9:0> == 0b0000000000)): sum = a;
	    /* when value is Inf, result is Inf */
	    ((a<14:10> == 0b11111) & (a<9:0> == 0b0000000000)): sum = a;
	    ((b<14:10> == 0b11111) & (b<9:0> == 0b0000000000)): sum = b;
	    else: par{
		/* exp compare and op switch */
		comp.do(b<14:10>, a<14:10>);
		alt {
		    (comp.l == 0b1): par{    /* (exp_a < exp_b) -> switch */	
			sign_a = b<15>;
			sign_b = a<15>;
			
			exp_a = b<14:10>;
			exp_b = a<14:10>;
			
			frac_a = 0b1 || b<9:0> || 0b00;
			frac_b = 0b1 || a<9:0> || 0b00;
		    } 
		    else: par{                        /* (exp_a > exp_b) -> not switch */
			sign_a = a<15>;
			sign_b = b<15>;
			
			exp_a = a<14:10>;
			exp_b = b<14:10>;
			
			frac_a = 0b1 || a<9:0> || 0b00;
			frac_b = 0b1 || b<9:0> || 0b00;		
		    }	    
		}
		
		
		/* get diff of exp and right shift frac */
		sub_shift.do(exp_a, exp_b, frac_b);
		shifted_frac_b = sub_shift.shifted_frac_b;
		sticky = sub_shift.sticky;   /* sticky bit */
	
		/* check sign bit and choice add or sub */
		alt{
		    (^(sign_a@sign_b) == 0b1): par{ /* when sign A and B are equal, add */
			aors.add(frac_a, shifted_frac_b);
			alt{
			    (aors.cout == 0b1): par{  /* when exist carry */
				frac_tmp = aors.result;
				exsh.do(exp_a, frac_tmp);
				res_exp = exsh.inc_exp;
				res_frac = exsh.shifted_frac; 
			    }		    
			    else: par{
				res_frac = aors.result;
				res_exp = exp_a;
			    }
			}
		    }
		    else: par{ /* when sign is not equal, sub */
			aors.sub(frac_a, shifted_frac_b);
			rzas.do(aors.result, exp_a);
			/* check whether exp become Denomal Num */
			comp_last.do(rzas.sub_exp, exp_a);
			alt{
			    (comp_last.l == 0b1): res_exp = 0b00000;
			    else: res_exp = rzas.sub_exp;
			}
			res_frac = rzas.shifted_frac;
		    }
		}
		sum = sign_a || res_exp || res_frac<11:2>;
	    }
	}
	
    }
}
/*End of File.*/
