circuit read_zero_and_shift{
    input frac<13>;
    input exp<5>;
    output shifted_frac<13>;
    output sub_exp<5>;
    instrin do;

    sel_v tmp<5>;   /* shift amount */
    reg_wr z;

    instruct do par{
	alt{
	    (frac<12> == 0b1): tmp = 0b00000;
	    (frac == 0b0000000000000): par{
		z := 0b1;
		tmp = 0b00000;
		}
	    (frac<12:11> == 0b01): tmp = 0b00001;	    
	    (frac<12:10> == 0b001): tmp = 0b00010;
	    (frac<12:9> == 0b0001): tmp = 0b00011;	 
	    (frac<12:8> == 0b00001): tmp = 0b00100;	    
	    (frac<12:7> == 0b000001): tmp = 0b00101; 
	    (frac<12:6> == 0b0000001): tmp = 0b00110;	    
	    (frac<12:5> == 0b00000001):	tmp = 0b00111;	    
	    (frac<12:4> == 0b000000001): tmp = 0b01000;	    
	    (frac<12:3> == 0b0000000001): tmp = 0b01001;
	    (frac<12:2> == 0b00000000001): tmp = 0b01010;
	    (frac<12:1> == 0b000000000001): tmp = 0b01011;
	    (frac == 0b0000000000001): tmp = 0b01100;
	}

	alt{
	    (z == 0b1): par{
		shifted_frac = 0b0000000000000;
		sub_exp = 0b00000;
	    }
	    else: par{
		shifted_frac = frac << tmp;
		sub_exp = exp + (^tmp + 0b00001);
	    }
	}
    }
}
