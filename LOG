---------------------------------------------------
--------------------------------------------------
--------------------------------------------------
11/18
指数部仮数部同時に比較するfifteen_compモジュール作成
それに伴うadd_halfの修正

-------------------------
11/17
stickyモジュール修正

---------------------
11/16
スティッキービット算出モジュール作成
それに伴うsub_shiftモジュール修正


-------------------
11/9
丸め処理のモジュールround_process追加
それに伴うコード，スクリプトの修正

最初の大小比較で指数部だけでなく
仮数部の比較も行うように修正する必要あるかも

---------------------
11/1
comp_bitモジュールとfivebit_compモジュール
の記述変更


---------------------
8/8
引数が無限大の時の記述追加
NaNについては加算の際のみであり
特に対処はしていない

8/3に示していることについては
対処していない
基本的に大きい引数が左に
くるようにすれば問題ないはず

---------------------
8/3
結果がゼロになる際の記述を追加．
減算して指数部がゼロ以下になる場合
結果の指数部をゼロにする.
（非正規数にする）

無限大やNaNについての記述を
今後追加していく.
符号が異なり,指数部が等しく，
仮数部が異なる場合,
オペランドの入れ替えが作動せずに
そのまま処理を行う場合の対処.
例:
0000010000000111 1000010010000100 0000011110000011
例の場合,仮数部はbの方が大きいが，
指数部は同じであるためにオペランドの
入れ替えが作動していない．
そのため正しい結果が得られていない.

---------------------
7/29
sign bitが異なる場合に
仮数部の減算を行い，
指数部の調整,仮数部の左シフトを
行えるようにした
(read_zero_and_shiftモジュールを作成)

シミュレーションの結果を見た限り
無限大や非正規化数以外に対しては
正しい処理を行っていると思う

値がゼロ，無限大,非正規仮数の場合の
処理について今後実装していく予定
---------------------
7/20
符号が同じの場合，仮数部の
足し算は(恐らく)正しく動作する
符号が同じ場合のスクリプトは
scriptディレクトリで
make half
を実行することで作成できる

for_operationはmasterへマージ済
(for_operation削除)
---------------------
7/19
とりあえずSECONDSのエラーはでない
結果の値は正しくないので修正する

---------------------
7/18
符号が異なる場合の処理以外を記述
構文的にはエラーはなさそう
SECONDSを利用してシミュレーションすると
エラーが起こり実行できず

sub_shiftのスクリプト作成

今後はエラーのない動作を目指して
for_operationブランチで作業を行う
(動かせるようになったら
masterブランチへマージ）
---------------------
2017/7/13
first commit
